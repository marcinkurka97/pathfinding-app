{"version":3,"sources":["Pathfinding/SingleNode.js","pathfindingAlgorithms/dijkstra.js","Pathfinding/PathfindingVisualizer.js","App.js","index.js"],"names":["SingleNode","props","state","this","row","col","isStart","isFinish","isVisited","isWall","onMouseEnter","onMouseDown","onMouseUp","extraClassName","id","className","React","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","counter","gap","Math","floor","random","onClick","visualizeDijkstra","generateMaze","map","rowIndex","key","nodeIndex","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.d63bc4d2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass SingleNode extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isStart,\r\n      isFinish,\r\n      isVisited,\r\n      isWall,\r\n      onMouseEnter,\r\n      onMouseDown,\r\n      onMouseUp\r\n    } = this.props;\r\n    const extraClassName = isStart\r\n      ? \"node__start\"\r\n      : isFinish\r\n      ? \"node__finish\"\r\n      : isVisited\r\n      ? \"node__visited\"\r\n      : isWall\r\n      ? \"node__wall\"\r\n      : \"\";\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SingleNode;\r\n","export function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter(neighbor => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React from \"react\";\r\nimport SingleNode from \"./SingleNode\";\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrder\r\n} from \"../pathfindingAlgorithms/dijkstra\";\r\nimport { cpus } from \"os\";\r\n\r\nexport default class PathfindingVisualizer extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { grid: [], mouseIsPressed: false };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node__visited\";\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node__shortest-path\";\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[7][5];\r\n    const finishNode = grid[7][29];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  generateMaze() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n\r\n    let counter = 0;\r\n    for (let row = 0; row < grid.length; row++) {\r\n      for (let col = 0; col < grid[row].length; col++) {\r\n        if (\r\n          row === 0 ||\r\n          col === 0 ||\r\n          row === grid.length - 1 ||\r\n          col === grid[row].length - 1\r\n        ) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({ grid: newGrid });\r\n        } else if (col % 2 === 0) {\r\n          let newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({ grid: newGrid });\r\n          if (counter < col / 2) {\r\n            const num = Math.floor(Math.random() * (grid.length - 2)) + 1;\r\n            const gap = grid[num][col];\r\n            newGrid = getNewGridWithWallToggled(\r\n              this.state.grid,\r\n              gap.row,\r\n              gap.col\r\n            );\r\n            this.setState({ grid: newGrid });\r\n          }\r\n          counter++;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.generateMaze()}>Generate Maze</button>\r\n        <div className=\"table\">\r\n          {grid.map((row, rowIndex) => {\r\n            return (\r\n              <div className=\"table__row\" key={rowIndex}>\r\n                {row.map((node, nodeIndex) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isStart,\r\n                    isFinish,\r\n                    isWall,\r\n                    isVisited\r\n                  } = node;\r\n                  return (\r\n                    <SingleNode\r\n                      key={nodeIndex}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></SingleNode>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 15; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 35; col++) {\r\n      currentRow.push(createNode(row, col));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (row, col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === 7 && col === 5,\r\n    isFinish: row === 7 && col === 29,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport PathfindingVisualizer from \"./Pathfinding/PathfindingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Pathfinding visualization</h1>\n      </header>\n      <section className=\"App-container\">\n        <PathfindingVisualizer></PathfindingVisualizer>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}